const VetProfile = () => {
  const [pageData, setPageData] = React.useState({
    arrayOfProfile: [],
    veteranComponents: [],
    pageIndex: 0,
    pageSize: 4,
  });

  useEffect(async () => {
    const allTodos = await API.graphql({ query: queries.listVeterans });
    console.log(allTodos);
    console.log("mappingData ", pageData);
    allTodos
      .getPage(pageData.pageIndex, pageData.pageSize)
      .then(onVetProfileSuccess)
      .catch(onVetProfileError);
  }, [pageData.pageIndex, pageData.pageSize]);

  const onVetProfileSuccess = (response) => {
    console.log("This is the data: ", response);
    setPageData((prevState) => {
      const bd = { ...prevState };
      vd.arrayOfProfile = response.id;
      vd.veteranComponents = vd.arrayOfProfile.map(mapVeteran);
      return vd;
    });
    console.log("Sponsor Profile", response);
  };
  const onVetProfileError = (err) => {
    console.log("error read", err);
  };

  const onDeleteSponsor = useCallback((id) => {
    console.log(id, { id });
    const handler = getDeleteSuccessHandler(id);

    deleteSponsor.deleteSponsor(id).then(handler).catch(onDeleteSponsorError);
  }, []);

  const getDeleteSuccessHandler = (sponserDeleted) => {
    console.log("getDeleteSuccessHandler", sponserDeleted);
    return () => {
      console.log("onDeleteSuccess", sponserDeleted);
      setPageData((prevState) => {
        const sd = { ...prevState };
        sd.arrayOfProfile = [...sd.arrayOfProfile];

        const idxOf = sd.arrayOfProfile.findIndex((print) => {
          let result = false;
          if (print.id === sponserDeleted) {
            result = true;
          }
          return result;
        });
        if (idxOf >= 0) {
          sd.arrayOfProfile.splice(idxOf, 1);
          sd.veteranComponents = sd.arrayOfProfile.map(mapVeteran);
        }
        return sd;
      });
    };
  };
  const onDeleteSponsorError = (err) => {
    console.error("Deleting", err);
  };

  const mapVeteran = (index) => (
    <VeteranCard
      id={sponsor.id}
      key={"ListA" + (sponsor.id || 0 - index)}
      onRemoveSponsor={onDeleteSponsor}
    />
  );
  return (
    <Box>
      <div className="pb-8 bg-white">
        <Container>
          <Row>{pageData.veteranComponents}</Row>
        </Container>
      </div>
    </Box>
  );
};
export default VetProfile;


const VetForm = () => {
  const [formData, setFormData] = React.useState({
    id: "",
    firstName: "",
    lastName: "",
    age: "",
    email: "",
    branch: "",
    dos: "",
    eos: "",
    location: "",
    picture: "",
    dob: "",
    pob: "",
    rank: "",
    isCasedClosed: "",
    notes: "",
  });

  React.useEffect(() => {
    if (state?.type === "FORM_EDIT") {
      const editForm = state.payload.vetform.id;
      setFormData(() => {
        const inputData = { ...formData, ...state.payload };
        inputData.vetform.id = editForm;
        return inputData;
      });
    }
  });

  const editVeteran = (e) => {
    e.preventDefault();
    if (formData && formData.id) {
      updateVeteran //(input: $input, condition: $condition)
        .updateVeteran(formData, formData.id)
        .then(onEditVeteranSuccess)
        .catch(onEditVeteranError);
    } else
      createVeteran
        .createVeteran(formData)
        .then(onAddVeteranSuccess)
        .catch(onAddVeteranError);
  };
  const onEditVeteranSuccess = (response) => {
    toastr.success("School has changed", response);
  };
  const onEditVeteranError = (err) => {
    console.log("ping no", err);
  };
  const onAddVeteranSuccess = (response) => {
    console.log("ping ok", response);
    setFormData((prevState) => {
      const editInput = { ...prevState };
      editInput.id = response;
      console.log("update state obj id -->", editInput.id);
      return editInput;
    });
  };
  const onAddVeteranError = (err) => {
    console.log("ping err", err);
  };

  const onFormChange = (e) => {
    const target = e.target;
    const userValue = target.value;
    const nameOfField = target.id;
    setFormData((prevState) => {
      const textInput = { ...prevState };
      textInput[nameOfField] = userValue;
      return textInput;
    });
  };
  return (
    <Box
      component="form"
      sx={{
        "& .MuiTextField-root": { m: 1, width: "25ch" },
      }}
      noValidate
      autoComplete="off"
    >
      <div>
        <TextField
          required
          id="outlined-required"
          label="Required"
          defaultValue="FirstName"
          onChange={onFormChange}
        />
        <TextField
          required
          id="outlined-required"
          label="Required"
          defaultValue="LastName"
          onChange={onFormChange}
        />

        <TextField
          id="outlined-number"
          label="Age"
          type="number"
          InputLabelProps={{
            shrink: true,
          }}
          onChange={onFormChange}
        />
        <FormControl>
          <InputLabel htmlFor="my-input" onChange={onFormChange}>
            Email address
          </InputLabel>
          <Input id="my-input" aria-describedby="my-helper-text" />
          <FormHelperText id="my-helper-text">
            We'll never share your email.
          </FormHelperText>
        </FormControl>
        <TextField
          required
          id="outlined-required"
          label="Required"
          defaultValue="Military Branch"
          onChange={onFormChange}
        />
        <TextField
          required
          id="outlined-required"
          label="Required"
          defaultValue="Rank"
          onChange={onFormChange}
        />

        <FormGroup>
          <FormControlLabel
            control={<Checkbox defaultChecked />}
            label="Case Closed"
            onChange={onFormChange}
          />
          <FormControlLabel disabled control={<Checkbox />} label="Disabled" />
        </FormGroup>
        <FormGroup>
          <FormControlLabel
            control={<Checkbox defaultChecked />}
            label="Case Completed"
          />
          <FormControlLabel disabled control={<Checkbox />} label="Disabled" />
        </FormGroup>
      </div>
      <div>
        <TextField
          id="filled-multiline-flexible"
          label="Multiline"
          multiline
          maxRows={10}
          value={value}
          defaultValue="Notes"
          onChange={onFormChange}
          variant="filled"
        />
      </div>
      <button
        type="submit"
        id="registerBtn"
        style={{
          margin: 5,
          width: "150px",
          border: "2px solid #222021",
          backgroundColor: "#ba68c8",
          color: "#041720",
        }}
        className="btn btn-primary"
        onClick={editVeteran}
      >
        {formData.id ? "Update Record" : "Submit"}
      </button>
    </Box>
  );
};

export default VetForm;

const VetCards = () => {
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <Card sx={{ maxWidth: 345 }}>
      <CardMedia
        sx={{ borderRadius: "50%" }}
        component="img"
        image="https://bit.ly/3AvqTEd"
        alt="Veteran Profile"
      />
      <CardContent>
        <Typography gutterBottom variant="h5" component="div">
          First Last M.
        </Typography>
        <Typography variant="body1" color="text.primary">
          Sponsor M. LastName
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Military Branch
        </Typography>
        <Typography variant="body2" color="text.secondary">
          1775-2010
        </Typography>
      </CardContent>
      <CardActions>
        <div>
          <Button variant="outlined" onClick={handleClickOpen}>
            Edit Profile
          </Button>
          <Dialog open={open} onClose={handleClose}>
            <DialogTitle>Edit Profile</DialogTitle>
            <DialogContent>
              <DialogContentText>
                <VetForm />
              </DialogContentText>
              <TextField
                autoFocus
                margin="dense"
                id="name"
                label="Form will be imported here"
                type="email"
                fullWidth
                variant="standard"
              />
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button onClick={handleClose}>Subscribe</Button>
            </DialogActions>
          </Dialog>
        </div>
      </CardActions>
    </Card>
  );
};
